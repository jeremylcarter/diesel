(defconventions :domainevents {:inherit [Test.Diesel.IDomainEvent]})

(namespace Employees
	(defvaluetype EmployeeNumber int)
	(defcommand ChangeTelephoneNumber (string TelephoneNumber)))

(namespace Clients 
	(defvaluetype ClientId)
	(defapplicationservice ImportService
		(defcommand ImportClient (int ClientId, string Name))))

(namespace TestCases.PropertyTypeDeclarations
	(defcommand PrintInt (int Value))
	(defcommand PrintNullable (float? Value))
	(defcommand PrintArraySimple (int[] Value))
	(defcommand PrintNullableSimple (decimal? Value))
	(defcommand PrintString (string Value))
	(defcommand PrintNamedTypeQualifiedDateTime (System.DateTime Value))
	(defcommand PrintNamedTypeQualifiedGuid (System.Guid Value))
	(defcommand PrintNamedTypeUnqualifiedGuid (Guid Value))
	(defcommand PrintNamedTypeUnqualifiedDecimal (Decimal Value))
	(defcommand PrintMulti (string Text, int? NullableNumber, string[] SingleDimArray, decimal Decimal, DateTime When)))


(namespace TestCases.Defvaluetype
	(defvaluetype InvoiceNumber)
	(defvaluetype Amount decimal)
	(defvaluetype LineItemNumber (int Value))
	(defvaluetype Name (string FirstName, string LastName))
	(defvaluetype SourceMetadata (string Source, int? SourceId))
	(defvaluetype RoleCollection (string[] Roles)))


(namespace TestCases.Defcommand
	(defcommand PrintString (string Name))
	(defcommand PrintNullable (int? Value))
	(defcommand PrintMultiple (string First, string Last))
	(defcommand PrintDateTime (DateTime OccurredOn))
	(defcommand PrintGuid (Guid SourceId))
	(defcommand PrintArrays (string[] Names, int[] Numbers, Guid[] Guids, DateTime[] Timestamps)))

(namespace TestCases.Defapplicationservice
	(defapplicationservice ImportApplicationService
		(defcommand ImportApplicationServiceCommand (Guid Id, string Name))))

(namespace TestCases.Defdomainevent
	(defdomainevent PaymentReceived (Guid Id, Decimal Amount, String Currency)))


(namespace TestCases.Defdto
	(defdto EmployeeName (string First, string Last)))


(namespace TestCases.Defenum
	(defenum State [On Off])
	(defenum StateWithOptionalDelimiter [On, Off]))


; Comment before namespace
(namespace TestCases.Comments
	;; Comment in namespace
	(defvaluetype CommentId)
	(defapplicationservice CommentService
		; Comment before commands
		(defcommand ImportComment (int CommentId, string Name))
		;; Comment after
		;; Multiple comments after
		))


;; We should be able to add DTOs (objects and enums) to DTOs, Commands and Events
(namespace TestCases.NestedDtos
	(defenum Role [Employee Contractor])
	(defdto PersonName (string First, string Last))
	(defdto DtoNestedEnum (Guid Id, Role Role))
	(defdto DtoNestedDto (Guid Id, PersonName Name))
	(defcommand ImportPersonNestedEnum (string Name, Role Role))
	(defdomainevent PersonImportedNestedEnum (Guid Id, string Name, Role Role))
	(defcommand ImportPersonNestedDto (PersonName Name, Role Role))
	(defdomainevent PersonImportedNestedDto (Guid Id, PersonName Name, Role Role)))
